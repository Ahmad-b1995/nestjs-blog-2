services:
  blog_nestjs:
    container_name: blog_nestjs
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - '${APP_PORT}:3000'
    networks:
      - blog_intranet
    env_file:
      - .env
    environment:
      - DB_HOST=blog_mysql
      - REDIS_HOST=blog_redis
    depends_on:
      blog_mysql:
        condition: service_healthy
      blog_redis:
        condition: service_healthy
    volumes:
      - ./uploads:/uploads
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:${APP_PORT}' ]
      interval: 30s
      timeout: 10s
      retries: 3
    command: node dist/main.js

  # blog_mysql:
  #   container_name: blog_mysql
  #   restart: always
  #   image: mysql:8.0.29
  #   env_file: .env
  #   volumes:
  #     - mysql:/var/lib/mysql
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   ports:
  #     - '3307:${DB_PORT}'
  #   networks:
  #     - blog_intranet
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
  #     MYSQL_DATABASE: ${DB_NAME}
  #     TZ: 'utc'
  #   command: --default-authentication-plugin=mysql_native_password
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'mysqladmin',
  #         '-u${DB_USER}',
  #         '-p${DB_PASSWORD}',
  #         'ping'
  #       ]
  #     interval: 10s
  #     retries: 5
  #     timeout: 10s
  #     start_period: 15s

  # blog_redis:
  #   container_name: blog_redis
  #   image: redis:alpine
  #   restart: unless-stopped
  #   volumes:
  #     - redis:/data
  #   ports:
  #     - 6380:${REDIS_PORT}
  #   networks:
  #     - blog_intranet
  #   healthcheck:
  #     test: [ 'CMD', 'redis-cli', 'ping' ]
  #     interval: 5s
  #     retries: 3
  #     timeout: 3s

  # blog_mysql_backup:
  #   container_name: blog_mysql_backup
  #   image: databack/mysql-backup
  #   env_file: .env
  #   environment:
  #     DB_SERVER: blog_mysql
  #     DB_PORT: ${DB_PORT}
  #     DB_USER: ${DB_USER}
  #     DB_PASS: ${DB_PASSWORD}
  #     BACKUP_DIR: '/backups'
  #   networks:
  #     - blog_intranet
  #   volumes:
  #     - ./backups:/backups
  #   depends_on:
  #     - blog_mysql

volumes:
  mysql:
    name: blog_mysql
  redis:
    name: blog_redis

networks:
  blog_intranet:
    name: blog_intranet
    driver: bridge